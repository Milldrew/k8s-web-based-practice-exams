apiVersion: apps/v1
kind: StatefulSet
metadata:
  name: k3s-agent
  labels:
    app: k3s-agent
    role: worker
spec:
  serviceName: k3s-agent
  replicas: 2
  selector:
    matchLabels:
      app: k3s-agent
      role: worker
  template:
    metadata:
      labels:
        app: k3s-agent
        role: worker
    spec:
      subdomain: k3s-agent
      initContainers:
      - name: wait-for-server
        image: busybox:latest
        command:
        - sh
        - -c
        - |
          echo "Waiting for k3s-server to be ready..."
          # Try multiple service name variations
          for svc in "k3s-server" "k3s-server.${NAMESPACE}" "k3s-server.${NAMESPACE}.svc.cluster.local"; do
            if nc -z $svc 6443 2>/dev/null; then
              echo "k3s-server is ready at $svc!"
              exit 0
            fi
          done
          # If not found, keep trying the namespace-qualified name
          until nc -z k3s-server.${NAMESPACE}.svc.cluster.local 6443 2>/dev/null; do
            echo "Waiting for k3s-server.${NAMESPACE}.svc.cluster.local:6443..."
            sleep 2
          done
          echo "k3s-server is ready!"
        env:
        - name: NAMESPACE
          valueFrom:
            fieldRef:
              fieldPath: metadata.namespace
      containers:
      - name: k3s
        image: harbor.yourdomain.com/k8s-images/k3s-agent-ssh:latest
        securityContext:
          privileged: true
        ports:
        - containerPort: 22
          name: ssh
          protocol: TCP
        - containerPort: 10250
          name: kubelet
          protocol: TCP
        volumeMounts:
        - name: k3s-data
          mountPath: /var/lib/rancher/k3s
        - name: run
          mountPath: /run
        - name: varrun
          mountPath: /var/run
        env:
        - name: K3S_TOKEN
          value: "mysecrettoken"
        - name: K3S_URL
          value: "https://k3s-server.$(NAMESPACE).svc.cluster.local:6443"
        - name: NAMESPACE
          valueFrom:
            fieldRef:
              fieldPath: metadata.namespace
        - name: K3S_NODE_NAME
          valueFrom:
            fieldRef:
              fieldPath: metadata.name

      volumes:
      - name: k3s-data
        emptyDir: {}
      - name: run
        emptyDir:
          medium: Memory
      - name: varrun
        emptyDir:
          medium: Memory
